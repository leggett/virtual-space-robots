// hunter by mageowl
// forked from smart_turret by mageowl
use("robot_api", <robot>)

fn(<turn_to>): {
    let(<angle>): -(p(0), *(floor(/(p(0), 360)), 360))
    if(lt(angle, 180)): {
        robot.turn(angle)
    } else: {
        robot.turn(-(angle, 360))
    }
}


const(<step_speed>): 40
fn(<move>): {
    let(<dist>): p(0)
    while: {
        robot.move(min(step_speed, dist))
        dist: -(dist, step_speed)

        if(eq(robot.raycast, "ship")): {
            robot.shoot()
            robot.turn(10)
            move(-(robot.raycast_dist, 100))
            super.return(false)
        }
        if(eq(robot.raycast, "bullet")): {
            robot.shoot()
            robot.turn(5)
        }

        return(and(lt(0, dist), gt(robot.raycast_dist, 20)))
    }
}

fn(<min>): ifv(lt(p(0), p(1)), p(0), p(1))


while: {
    let(<i>): 0
    let(<max_dist>): 0
    let(<max_angle>): 0
    let(<ship_dist>): -1
    let(<ship_angle>): -1

    while: {
        if(eq(robot.raycast, "ship")): {
            ship_dist: robot.raycast_dist
            ship_angle: i
            robot.turn(5)
            robot.shoot()
            super.return(false)
        }
        if(eq(robot.raycast, "bullet")): {
            robot.shoot()
        }
        
        if(
            and(
                gt(robot.raycast_dist, max_dist), 
                not(eq(180, i))
            )
        ): {
            max_dist: robot.raycast_dist
            max_angle: i
        }

        robot.turn(10)
        i: +(i, 10)

        return(not(eq(i, 360)))
    }
    
    turn_to(ifv(eq(ship_angle, -1), max_angle, 0))
    move(ifv(eq(ship_dist, -1), -(max_dist, 40), ship_dist))
}
